generator client {
  provider        = "prisma-client"
  output          = "../src/generated/prisma"
  runtime         = "bun"
  previewFeatures = ["views", "relationJoins", "driverAdapters", "queryCompiler"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Category {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  hasNotes Boolean @default(false) @map("has_notes")

  transactions Transaction[]
  template     Template[]

  @@map("categories")
}

model Transaction {
  id         Int             @id @default(autoincrement())
  amount     Decimal
  type       TransactionType @default(expense)
  category   Category        @relation(fields: [categoryId], references: [id])
  categoryId Int             @map("category_id")
  date       Int
  note       String          @default("")

  @@index([type])
  @@index([date])
  @@map("transactions")
}

enum TransactionType {
  expense
  income
}

model Template {
  id         Int             @id @default(autoincrement())
  amount     Decimal
  type       TransactionType @default(expense)
  category   Category        @relation(fields: [categoryId], references: [id])
  categoryId Int             @map("category_id")
  day        Int
  note       String          @default("")

  @@index([type])
  @@map("templates")
}

view ReviewYears {
  year    Int     @id
  income  Decimal
  expense Decimal
  total   Decimal

  @@map("review_years")
}

view ReviewMonths {
  year    Int
  month   Int
  income  Decimal
  expense Decimal
  total   Decimal

  @@id([year, month])
  @@map("review_months")
}

view ReviewCategoryMonths {
  year         Int
  month        Int
  categoryName String  @map("category_name")
  income       Decimal
  expense      Decimal
  total        Decimal

  @@id([year, month, categoryName])
  @@map("review_category_months")
}

// BetterAuth

model User {
  id              String    @id @default(cuid(2))
  name            String
  username        String    @unique
  displayUsername String
  email           String    @unique
  emailVerified   Boolean   @map("email_verified")
  image           String?
  createdAt       DateTime  @map("created_at")
  updatedAt       DateTime  @map("updated_at")
  sessions        Session[]
  accounts        Account[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid(2))
  expiresAt DateTime @map("expires_at")
  token     String   @unique
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid(2))
  accountId             String    @map("account_id")
  providerId            String    @map("provider_id")
  userId                String    @map("user_id")
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @map("access_token")
  refreshToken          String?   @map("refresh_token")
  idToken               String?   @map("id_token")
  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope                 String?
  password              String?
  createdAt             DateTime  @map("created_at")
  updatedAt             DateTime  @map("updated_at")

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime  @map("expires_at")
  createdAt  DateTime? @map("created_at")
  updatedAt  DateTime? @map("updated_at")

  @@map("verification")
}
